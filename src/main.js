import axios from "axios";
import readline from 'readline';

import { config } from './config.js';

let maxPriceFilter = 0;
let modelFilter = '';
let backdropFilter = '';
let lastProcessedGiftId = null;
let processedListings = new Set();
let isFirstRun = true;

const sendTelegramNotification = async (message) => {
    const { botToken, chatId } = config.telegram;

    if (!botToken || !chatId || botToken === '–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê') {
        console.error('>> –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ ID —á–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ config.js!');
        return;
    }
    const TELEGRAM_API = `https://api.telegram.org/bot${botToken}/sendMessage`;
    try {
        await axios.post(TELEGRAM_API, {
            chat_id: chatId,
            text: message,
            parse_mode: 'HTML',
        });
    } catch (error) {
        let errorMessage = '>> –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: ';
        if (error.response) {
            errorMessage += `–°—Ç–∞—Ç—É—Å ${error.response.status}, –û—Ç–≤–µ—Ç: ${error.response.data.description}`;
        } else if (error.request) {
            errorMessage += '–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Telegram –Ω–µ –ø–æ–ª—É—á–µ–Ω.';
        } else {
            errorMessage += error.message;
        }
        console.error(errorMessage);
    }
};

const getGifts = async () => {
    try {
        const response = await axios({
            method: 'post',
            maxBodyLength: Infinity,
            url: config.api.url,
            headers: config.api.headers,
            data: {
                "page": 1,
                "limit": 30,
                "sort": "{\"message_post_time\":-1,\"gift_id\":-1}",
                "filter": "{\"price\":{\"$exists\":true},\"buyer\":{\"$exists\":false},\"asset\":\"TON\"}",
                "ref": 0,
                "price_range": null,
                "user_auth": config.api.userAuth
            }
        });
        return response.data;
    } catch (error) {
        let errorMessage = '>> –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ';
        if (error.response) {
            errorMessage += `–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π ${error.response.status}. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à userAuth —É—Å—Ç–∞—Ä–µ–ª.`;
        } else if (error.request) {
            errorMessage += '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API.';
        } else {
            errorMessage += error.message;
        }
        console.error(errorMessage);
        throw error;
    }
};

const createDetailedMessage = (gift) => {
    const directLink = `https://t.me/tonnel_network_bot/gift?startapp=${gift.gift_id}`;
    const messageParts = [
        `<b>üéÅ –ù–û–í–´–ô –ü–û–î–ê–†–û–ö –ù–ê–ô–î–ï–ù!</b>\n`,
        `<b>üìù –ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${gift.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
        `<b>üè∑Ô∏è –ú–æ–¥–µ–ª—å:</b> ${gift.model || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`,
        `<b>üé® –§–æ–Ω:</b> ${gift.backdrop || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
        `<b>#Ô∏è‚É£ ID –ø–æ–¥–∞—Ä–∫–∞:</b> <code>${gift.gift_id}</code>`,
        `<b>#Ô∏è‚É£ –ù–æ–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞:</b> <code>${gift.gift_num || '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>`,
        `<b>üí∞ –¶–µ–Ω–∞:</b> ${gift.price || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} ${gift.asset || ''}\n`,
        `<b>üõí <a href="${directLink}">–ö–£–ü–ò–¢–¨ –°–ï–ô–ß–ê–°</a></b>`
    ];
    const activeFilters = [];
    if (maxPriceFilter > 0) activeFilters.push(`—Ü–µ–Ω–∞ –¥–æ ${maxPriceFilter} TON`);
    if (modelFilter) activeFilters.push(`–º–æ–¥–µ–ª—å "${modelFilter}"`);
    if (backdropFilter) activeFilters.push(`—Ñ–æ–Ω "${backdropFilter}"`);
    if (activeFilters.length > 0) {
        messageParts.push(`\n<i>üîç –°—Ä–∞–±–æ—Ç–∞–≤—à–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã: ${activeFilters.join(', ')}</i>`);
    }
    return messageParts.join('\n');
};

const mainLogic = async () => {
    try {
        const responseData = await getGifts();
        const currentGifts = Array.isArray(responseData) ? responseData : (responseData?.data?.gifts || []);
        
        if (currentGifts.length === 0) return;

        if (isFirstRun) {
            currentGifts.forEach(gift => processedListings.add(`${gift.gift_id}-${gift.price}`));
            lastProcessedGiftId = currentGifts[0].gift_id;
            isFirstRun = false; 
            let startupMessage = '‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:';
            const activeFilters = [];
            if (maxPriceFilter > 0) activeFilters.push(`—Ü–µ–Ω–∞ –¥–æ ${maxPriceFilter} TON`);
            if (modelFilter) activeFilters.push(`–º–æ–¥–µ–ª—å "${modelFilter}"`);
            if (backdropFilter) activeFilters.push(`—Ñ–æ–Ω "${backdropFilter}"`);
            if (activeFilters.length > 0) {
                startupMessage += `\n- ${activeFilters.join('\n- ')}`;
            } else {
                startupMessage = '‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –≤—Å–µ –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏.';
            }
            await sendTelegramNotification(startupMessage);
            return;
        }
        
        const lastKnownIndex = currentGifts.findIndex(gift => gift.gift_id === lastProcessedGiftId);
        let candidateGifts = (lastKnownIndex === -1) ? currentGifts : currentGifts.slice(0, lastKnownIndex);
        
        const newGifts = candidateGifts.filter(gift => !processedListings.has(`${gift.gift_id}-${gift.price}`));
        
        if (newGifts.length === 0) {
             lastProcessedGiftId = currentGifts[0].gift_id;
             return;
        }
        
        newGifts.forEach(gift => processedListings.add(`${gift.gift_id}-${gift.price}`));
        
        const giftsToNotify = newGifts.filter(gift => {
            const priceMatch = (maxPriceFilter === 0 || gift.price <= maxPriceFilter);
            const modelMatch = !modelFilter || (gift.model && gift.model.toLowerCase().includes(modelFilter));
            const backdropMatch = !backdropFilter || (gift.backdrop && gift.backdrop.toLowerCase().includes(backdropFilter));
            return priceMatch && modelMatch && backdropMatch;
        });

        if (giftsToNotify.length > 0) {
            for (const gift of giftsToNotify) {
                await sendTelegramNotification(createDetailedMessage(gift));
                await new Promise(resolve => setTimeout(resolve, 500));
            }
        }

        lastProcessedGiftId = currentGifts[0].gift_id;
        
        if (processedListings.size > 2000) {
            const listingsArray = Array.from(processedListings);
            processedListings.clear();
            listingsArray.slice(-1000).forEach(id => processedListings.add(id));
        }

    } catch (error) {
        console.error(">> ‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ:", error.message);
        await new Promise(resolve => setTimeout(resolve, 5000));
    }
};

async function startBot() {
    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
    const askQuestion = (query) => new Promise(resolve => rl.question(query, resolve));

    try {
        const priceInput = await askQuestion('–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (TON, Enter - –≤—Å–µ): ');
        const parsedPrice = parseFloat(priceInput.trim());
        if (!isNaN(parsedPrice) && parsedPrice > 0) {
            maxPriceFilter = parsedPrice;
            console.log(`‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ: –¥–æ ${maxPriceFilter} TON`);
        } else {
            console.log('‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
        }

        const modelInput = await askQuestion('–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ (Enter - –≤—Å–µ): ');
        modelFilter = modelInput.trim().toLowerCase();
        if (modelFilter) {
            console.log(`‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥–µ–ª–∏: "${modelFilter}"`);
        } else {
            console.log('‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥–µ–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
        }

        const backdropInput = await askQuestion('–í–≤–µ–¥–∏—Ç–µ —Ñ–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ (Enter - –≤—Å–µ): ');
        backdropFilter = backdropInput.trim().toLowerCase();
        if (backdropFilter) {
            console.log(`‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ —Ñ–æ–Ω—É: "${backdropFilter}"`);
        } else {
            console.log('‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ —Ñ–æ–Ω—É –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
        }
        
        console.log("\n>> üöÄ –ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∞—Ä–∫–æ–≤...");
        await mainLogic(); 
        setInterval(mainLogic, config.app.pollingInterval);
        
    } catch (error) {
        console.error('>> ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:', error);
    } finally {
        rl.close();
    }
}

startBot().catch(error => {
    console.error('>> ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
    process.exit(1);
});